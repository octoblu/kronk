#!/bin/bash

rm_server() {
  local backend_id="$1"
  local server_id="$2"
  local docker_url="$(etcdctl get /octoblu/vctl/docker_url 2>/dev/null)"
  local vulcan_uri="$(etcdctl get /octoblu/vulcand-major/endpoint 2>/dev/null)"

  /usr/bin/docker run --rm \
    ${docker_url} \
      --vulcan "${vulcand_uri}" \
      server rm \
        --backend "${backend_id}" \
        --id      "${server_id}"
}

stop_docker() {
  /usr/bin/docker rm \
    --force \
    $@ &> /dev/null
}

wait_for_docker_port() {
  local docker_name="$1"
  local backend_id="$2"
  local server_id="$3"
  local docker_exit_code=1

  while [ "${docker_exit_code}" != "0" ]; do
    echo "Waiting for docker port"
    docker port "${docker_name}" &> /dev/null
    docker_exit_code=$?
    rm_server "${backend_id}" "${server_id}"
    sleep 1
  done
  echo "done."
}

write_env_file() {
  local service_base_name="$1"
  local docker_name="$2"
  local bucket_hostname="$(/usr/bin/etcdctl get /cluster/env/bucket-hostname 2>/dev/null)"
  if [ ! -f "/tmp/env-aes.key" ]; then
    etcdctl get /cluster/env/aes-key 2> /dev/null > /tmp/env-aes.key
  fi
  /usr/bin/curl -s "http://${bucket_hostname}/${service_base_name}" > "/tmp/${docker_name}.env.enc"
  /usr/bin/openssl enc -aes-256-cbc -d -kfile /tmp/env-aes.key -in "/tmp/${docker_name}.env.enc" -out "/tmp/${docker_name}.env"
}

write_port_file() {
  local service_docker_name="$1"
  local port="$2"

  docker inspect "${service_docker_name}" \
    | docker run --rm --net "host" --interactive realguess/jq \
      jq --raw-output ".[].NetworkSettings.Ports[\"${port}\"][].HostPort" \
    | xargs echo -n > "/tmp/${service_docker_name}-port"
  exit $?
}

main(){
  local namespace="$1"
  local service_base_name="$2"
  local service_suffix="$3"
  local service_prefix="${namespace}-${service_base_name}"
  local etcd_dir="${namespace}/${service_base_name}"
  local port="$(etcdctl get ${etcd_dir}/port 2>/dev/null || echo 80/tcp)"
  local cluster_name="$(etcdctl get /cluster/name 2>/dev/null)"
  local backend_id="${service_prefix}"
  local use_cluster_in_backend="$(etcdctl get ${etcd_dir}/use_cluster_in_backend 2>/dev/null)"
  if [ "${use_cluster_in_backend}" == "true" ]; then
    backend_id="${service_prefix}-${cluster_name}"
  fi
  local register_docker_name="${service_prefix}-register-${service_suffix}"
  local service_docker_name="${service_prefix}-${service_suffix}"
  local server_id="${service_prefix}-${cluster_name}-${service_suffix}"

  stop_docker "${register_docker_name}"
  wait_for_docker_port "${service_docker_name}" "${backend_id}" "${server_id}"
  write_env_file "${service_base_name}" "${register_docker_name}"
  write_port_file "${service_docker_name}" "${port}"
}
main $@
