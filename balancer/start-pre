#!/bin/bash

assert_docker_url_etcd_key() {
  local docker_url_etcd_key="$1"
  etcdctl get "${docker_url_etcd_key}" 4&> /dev/null
  if [ "$?" != "0" ]; then
    echo "etcd did not contain: ${docker_url_etcd_key}"
    exit 1
  fi
}

docker_login() {
  /usr/bin/docker login \
    --username $(/usr/bin/etcdctl get /docker/quay.io/username 2>/dev/null) \
    --password $(/usr/bin/etcdctl get /docker/quay.io/password 2>/dev/null) \
    --email $(/usr/bin/etcdctl get /docker/quay.io/email 2>/dev/null) \
    quay.io
}

stop_docker_with_force() {
  /usr/bin/docker rm \
    --force \
    $@ &> /dev/null
}

stop_docker() {
  /usr/bin/docker stop \
    $@ &> /dev/null
}

write_env_file() {
  local service_base_name="$1"
  local docker_name="$2"
  local bucket_hostname="$(/usr/bin/etcdctl get /cluster/env/bucket-hostname 2>/dev/null)"
  if [ ! -f "/tmp/env-aes.key" ]; then
    /usr/bin/etcdctl get /cluster/env/aes-key 2> /dev/null > /tmp/env-aes.key
  fi
  local AES_KEY="$(/usr/bin/cat /tmp/env-aes.key)"
  /usr/bin/curl -s "http://${bucket_hostname}/latest/${service_base_name}.env" > "/tmp/${docker_name}.env.enc"
  /usr/bin/openssl enc -aes-256-cbc -d -k "${AES_KEY}" -in "/tmp/${docker_name}.env.enc" -out "/tmp/${docker_name}.env"
}

main(){
  local namespace="$1"
  local service_base_name="$2"
  local service_prefix="${namespace}-${service_base_name}"
  local etcd_dir="${namespace}/${service_base_name}"
  local docker_url_etcd_key="${etcd_dir}/docker_url"
  local register_docker_name="${service_prefix}-register"
  local docker_name="${service_prefix}"
  local tattle_docker_name="${service_prefix}-tattle"

  assert_docker_url_etcd_key "${docker_url_etcd_key}"
  stop_docker_with_force "${docker_name}" "${tattle_docker_name}"
  stop_docker "${register_docker_name}"
  docker_login
  write_env_file "${service_base_name}" "${docker_name}"
  write_env_file "tattle" "${tattle_docker_name}"
}
main $@
