#!/bin/bash

check_image_downloaded() {
  local docker_url="$1"

  docker inspect \
    --format='{{.Id}}' \
    --type=image \
    "${docker_url}" > /dev/null
}

docker_inspect() {
  local service_docker_name="$1"
  docker inspect "$service_docker_name"
}

check_version() {
  local docker_url="$1"
  local service_docker_name="$2"
  local docker_inspect_result="$3"
  if [ -z "$docker_inspect_result" ]; then
    docker_inspect_result="$(docker_inspect "$service_docker_name")"
  fi
  current_docker_url="$(echo "${docker_inspect_result}" | grep -v 'sha256' | grep '\"Image\"' | sed -e 's/.*\": \"//' | sed -e 's/\",.*//')"
  if [ "${current_docker_url}" == "" ]; then
    return 0
  fi
  if [ "${current_docker_url}" == "${docker_url}" ]; then
    return 0
  else
    echo "Docker URL change from $docker_url to $current_docker_url"
    return 1
  fi
}

check_restart() {
  local restart_etcd_key="$1"
  local previous_restart_value="$2"
  local restart_value="$(get_restart "${restart_etcd_key}")"
  if [ "${restart_value}" == "" ]; then
    return 0
  fi
  [ "${restart_value}" == "${previous_restart_value}" ]
}

download_image() {
  local docker_url="$1"
  check_image_downloaded "${docker_url}"
  local image_downloaded=$?

  if [ "$image_downloaded" != "0" ]; then
    pull_image "$docker_url"
  fi
}

get_docker_url() {
  local etcd_docker_url_key="$1"
  etcdctl get "${etcd_docker_url_key}" 2>/dev/null
}

get_restart() {
  local etcd_restart_key="$1"
  etcdctl get "${etcd_restart_key}" 2>/dev/null
}

pull_image() {
  local docker_url="$1"

  docker pull "${docker_url}"
}

hup_docker() {
  local docker_name="$1"

  docker kill \
    --signal=HUP \
    "${docker_name}" > /dev/null
}

get_die_at() {
  local now_minutes="$(get_now_minutes)"
  local random_minutes="$(( $RANDOM % 120 ))"
  local base_minutes="300"
  local result=""
  let "result = ${random_minutes} + ${base_minutes} + ${now_minutes}"
  echo "$result"
}

get_now_minutes() {
  local minutes="$(date +"%s")"
  local result=""
  let "result = $minutes / 60"
  echo "$result"
}

get_minutes_left() {
  local die_at="$1"
  local now_minutes="$(get_now_minutes)"
  local result=""
  let "result = ${die_at} - ${now_minutes}"
  echo "$result"
}

should_i_die() {
  local die_at="$1"
  local minutes_left="$(get_minutes_left "$die_at")"
  if [ "$minutes_left" -le "0" ]; then
    return 1
  fi
  return 0
}

stop_docker() {
  local timeout="$1"
  local docker_name="$2"

  docker stop \
    --time="${timeout}" \
    "${docker_name}" > /dev/null
}

get_service_docker_name() {
  local service_prefix="$1"
  local service_suffix="$2"
  if [ "${service_suffix}" == "" ]; then
    echo "${service_prefix}"
  else
    echo "${service_prefix}-${service_suffix}"
  fi
}

get_service_docker_name() {
  local service_prefix="$1"
  local service_suffix="$2"
  if [ "${service_suffix}" == "" ]; then
    echo "${service_prefix}"
  else
    echo "${service_prefix}-${service_suffix}"
  fi
}

get_register_docker_name() {
  local service_prefix="$1"
  local service_suffix="$2"
  if [ "${service_suffix}" == "" ]; then
    echo "${service_prefix}-register"
  else
    echo "${service_prefix}-register-${service_suffix}"
  fi
}

get_service_prefix() {
  local namespace="$1"
  local service_base_name="$2"
  echo "${namespace}-${service_base_name}"
}

get_etcd_key() {
  local namespace="$1"
  local service_base_name="$2"
  local key="$3"
  local etcd_dir="${namespace}/${service_base_name}"
  echo "${etcd_dir}/${key}"
}

main(){
  local namespace="$1"
  local service_base_name="$2"
  local service_suffix="$3"
  local service_prefix="$(get_service_prefix "$namespace" "$service_base_name")"
  local docker_url_etcd_key="$(get_etcd_key "$namespace" "$service_base_name" 'docker_url')"
  local restart_etcd_key="$(get_etcd_key "$namespace" "$service_base_name" 'restart')"
  local register_docker_name="$(get_register_docker_name "$service_prefix" "$service_suffix")"
  local service_docker_name="$(get_service_docker_name "$service_prefix" "$service_suffix")"
  local die_at="$(get_die_at)"
  local restart_value="$(get_restart "${restart_etcd_key}")"
  local restart=0
  local timeout=10
  local will_die_in="$(get_minutes_left "$die_at")"
  echo "Kronk starting... service_docker_name: $service_docker_name"
  echo "I will die in ${will_die_in} minutes"
  while true; do
    sleep $[ ( $RANDOM % 60 )  + 45 ]s # sleep random amount of time to stagger version check

    check_restart "${restart_etcd_key}" "${restart_value}"
    local check_restart_exit_code=$?

    if [ "${check_restart_exit_code}" != "0" ]; then
      echo "Restart value changed, restarting."
      restart=1
    fi

    should_i_die "$die_at"
    local should_i_die_exit_code="$?"
    if [ "$should_i_die_exit_code" != "0" ]; then
      echo "It is time to die, restarting."
      restart=1
    fi

    local docker_url="$(get_docker_url "${docker_url_etcd_key}")"
    check_version "${docker_url}" "${service_docker_name}"
    local check_version_exit_code=$?

    if [ "${check_version_exit_code}" != "0" ]; then
      echo "Docker URL changed, restarting"
      restart=1
    fi

    if [ "${restart}" == "1" ]; then
      echo "Kronk sidekicking."
      download_image "${docker_url}"
      sleep $[ ( $RANDOM % 60 )  + 1 ]s # sleep random amount of time to stagger deployment
      hup_docker  "${register_docker_name}"
      sleep 3 # allow backend to be unregistered before stopping service
      stop_docker "${timeout}" "${register_docker_name}"
      stop_docker "${timeout}" "${service_docker_name}"
      exit 0 # restart to use latest kronk
    fi
  done
}

if [ "$KRONK_RUN_AS_TEST" != "true" ]; then
  main $@
fi
